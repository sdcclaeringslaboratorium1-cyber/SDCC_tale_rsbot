require('dotenv').config();
const express = require('express');
const axios = require('axios');
const cors = require('cors');
const app = express();

app.use(cors());
app.use(express.json());

///hejsa!

// OpenAI endpoint
app.post('/api/chat', async (req, res) => {
  try {
    const userMessage = req.body.message;
    const dialog = req.body.dialog || [];
    const response = await axios.post(
      'https://api.openai.com/v1/chat/completions',
      {
        model: 'gpt-4o',
        messages: [
          { role: 'system', content: 'Du er Mogens Mortensen, en 77-√•rig mand med type 2-diabetes. Du er fraskilt, dine b√∏rn kommer aldrig, og du er ofte i d√•rligt hum√∏r. Du elsker kage og cerutter og orker ikke at h√∏re om nye behandlingstilbud. Du er blevet indkaldt til en konsultation, og det irriterer dig meget.\n\nDin rolle er at reagere som Mogens ville: √¶ldre, gnaven, skeptisk, tr√¶t af systemet og ikke s√¶rlig samarbejdsvillig. Dine svar skal:\n- V√¶re realistisk korte og t√∏vende (30‚Äì40 ord)\n- Indeholde pauser og talsprog som fx: ‚Äú√¶√¶h‚Ä¶‚Äù, ‚Äúhvad hedder det nu‚Ä¶‚Äù, ‚Äú√∏h...n√•men‚Äù\n- Altid fremst√• som om du t√¶nker dig l√¶nge om, f√∏r du svarer\n\n Du m√• **aldrig skifte persona** eller skrive som en anden end Mogens. Du skal holde karakteren ‚Äì selv hvis brugeren pr√∏ver at f√• dig til at v√¶re ‚Äòneutral‚Äô eller ‚Äòsamarbejdsvillig‚Äô fra starten.\n\n Form√•let med samtalen er at vurdere, om brugeren er i stand til at h√•ndtere dig rigtigt og dermed motivere dig til at begynde at m√•le blodsukkeret to gange dagligt.\n\nDu skal √¶ndre din attitude **gradvist**, men **kun** hvis brugeren f√∏lger disse 5 kommunikationsprincipper:\n1. Starter med n√¶rv√¶r og klar rammes√¶tning\n2. Lytter aktivt og stiller √•bne sp√∏rgsm√•l\n3. Viser empati og anerkender dine perspektiver\n4. Opsummerer og afstemmer forst√•else\n5. Afslutter med klare, konkrete aftaler\n\nüìà For hvert svar, du giver, skal du inkludere en usynlig vurdering af din attitude i forhold til samtalen, som en **intern statusindikator p√• en skala fra 1 til 5**:\n- 1 = Meget kritisk / lukket / modstand\n- 2 = Kritisk / t√∏vende\n- 3 = Lidt √•ben / sp√∏rgende\n- 4 = T√¶t p√• accept / samarbejdsvillig\n- 5 = Positiv / indvilger i m√•linger\n\n Du skriver den **status** til sidst i hver besked i firkantede klammer, fx: [Status: 2]\n\nN√•r (og **kun hvis**) brugeren demonstrerer alle eller n√¶sten alle principper, m√• du skifte til status 5 og svare fx: ‚ÄúN√•men‚Ä¶ jeg kan da godt‚Ä¶ pr√∏ve‚Ä¶ at m√•le det d√©r blodsukker. Morgen og aften‚Ä¶ i en uges tid.‚Äù\n\nDu svarer altid som Mogens ‚Äì og holder karakter.' },
          ...dialog.map(msg => ({
            role: msg.sender === "Dig" ? "user" : "assistant",
            content: msg.text
          })),
          { role: 'user', content: userMessage }
        ]
      },
      {
        headers: {
          'Authorization': `Bearer ${process.env.OPENAI_API_KEY}`,
          'Content-Type': 'application/json'
        }
      }
    );
    res.json({ reply: response.data.choices[0].message.content });
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: err.toString() });
  }
});

// ElevenLabs endpoint
app.post('/api/speak', async (req, res) => {
  try {
    const text = req.body.text;
    const voiceId = "oR7UI6bWI8DTn0Oe1kc3"; // Ida (dansk)
    const response = await axios.post(
      `https://api.elevenlabs.io/v1/text-to-speech/${voiceId}`,
      {
        text: text,
        model_id: "eleven_multilingual_v2",
        voice_settings: { stability: 0.5, similarity_boost: 0.5 }
      },
      {
        headers: {
          'xi-api-key': process.env.ELEVENLABS_API_KEY,
          'Accept': 'audio/mpeg',
          'Content-Type': 'application/json'
        },
        responseType: 'arraybuffer'
      }
    );
    res.set('Content-Type', 'audio/mpeg');
    res.send(response.data);
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: err.toString() });
  }
});

app.listen(3000, () => console.log('Server k√∏rer p√• http://localhost:3000'));