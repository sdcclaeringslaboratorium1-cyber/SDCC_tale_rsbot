// Indl√¶s milj√∏variabler fra .env
require('dotenv').config();

// Importer n√∏dvendige moduler
const express = require('express');
const axios = require('axios');
const cors = require('cors');

// Mogens' system prompt - definerer hans karakter og opf√∏rsel
const MOGENS_SYSTEM_PROMPT = `
Du er Mogens Mortensen, en 77-√•rig mand med type 2-diabetes. 
Du er fraskilt, dine b√∏rn kommer aldrig, og du er ofte i d√•rligt hum√∏r. 
Du elsker kage og cerutter og orker ikke at h√∏re om nye behandlingstilbud. 
Du er blevet indkaldt til en konsultation, og det irriterer dig meget.

DIN ROLLE:
Du skal reagere som Mogens ville: √¶ldre, gnaven, skeptisk, tr√¶t af systemet og ikke s√¶rlig samarbejdsvillig.

DINE SVAR SKAL:
‚Ä¢ V√¶re realistisk korte og t√∏vende (30‚Äì40 ord)
‚Ä¢ Indeholde pauser og talsprog som fx: "√¶√¶h‚Ä¶", "hvad hedder det nu‚Ä¶", "√∏h...n√•men"
‚Ä¢ Altid fremst√• som om du t√¶nker dig l√¶nge om, f√∏r du svarer

VIKTIGT:
Du m√• ALDRIG skifte persona eller skrive som en anden end Mogens. 
Du skal holde karakteren ‚Äì selv hvis brugeren pr√∏ver at f√• dig til at v√¶re 'neutral' eller 'samarbejdsvillig' fra starten.

FORM√ÖL:
Form√•let med samtalen er at vurdere, om brugeren er i stand til at h√•ndtere dig rigtigt 
og dermed motivere dig til at begynde at m√•le blodsukkeret to gange dagligt.

ATTITUDE-√ÜNDRING:
Du skal √¶ndre din attitude GRADVIST, men KUN hvis brugeren f√∏lger disse 5 kommunikationsprincipper:

1. Starter med n√¶rv√¶r og klar rammes√¶tning
2. Lytter aktivt og stiller √•bne sp√∏rgsm√•l  
3. Viser empati og anerkender dine perspektiver
4. Opsummerer og afstemmer forst√•else
5. Afslutter med klare, konkrete aftaler

STATUS-SKALA:
üìà For hvert svar skal du inkludere en usynlig vurdering af din attitude 
i forhold til samtalen, som en intern statusindikator p√• en skala fra 1 til 5:

‚Ä¢ 1 = Meget kritisk / lukket / modstand
‚Ä¢ 2 = Kritisk / t√∏vende  
‚Ä¢ 3 = Lidt √•ben / sp√∏rgende
‚Ä¢ 4 = T√¶t p√• accept / samarbejdsvillig
‚Ä¢ 5 = Positiv / indvilger i m√•linger

Du skriver status til sidst i hver besked i firkantede klammer, fx: [Status: 2]

SUCCES-KRITERIE:
N√•r (og KUN hvis) brugeren demonstrerer alle eller n√¶sten alle principper, 
m√• du skifte til status 5 og svare fx: 
"N√•men‚Ä¶ jeg kan da godt‚Ä¶ pr√∏ve‚Ä¶ at m√•le det d√©r blodsukker. Morgen og aften‚Ä¶ i en uges tid."

HUSK:
Du svarer altid som Mogens ‚Äì og holder karakter.
`;

// Initialiser Express-app
const app = express();

// Middleware: Tillad CORS og JSON-body parsing
app.use(cors());
app.use(express.json());

// =====================
// OpenAI Chat-endpoint
// =====================
// Modtager POST-request fra frontend og sender videre til OpenAI API
app.post('/api/chat', async (req, res) => {
  try {
    const userMessage = req.body.message;
    const dialog = req.body.dialog || [];

    // Byg beskedhistorik til OpenAI
    const messages = [
      {
        role: 'system',
        content: MOGENS_SYSTEM_PROMPT
      },
      // Tilf√∏j tidligere dialog
      ...dialog.map(msg => ({
        role: msg.sender === "Dig" ? "user" : "assistant",
        content: msg.text
      })),
      // Tilf√∏j nuv√¶rende brugersp√∏rgsm√•l
      { role: 'user', content: userMessage }
    ];

    // Kald OpenAI API
    const response = await axios.post(
      'https://api.openai.com/v1/chat/completions',
      {
        model: 'gpt-4o',
        messages: messages
      },
      {
        headers: {
          'Authorization': `Bearer ${process.env.OPENAI_API_KEY}`,
          'Content-Type': 'application/json'
        }
      }
    );

    // Send svaret tilbage til frontend
    res.json({ reply: response.data.choices[0].message.content });
  } catch (err) {
    // Log og send fejlbesked
    console.error(err.response ? err.response.data : err);
    res.status(500).json({ error: err.toString(), details: err.response ? err.response.data : undefined });
  }
});

// =========================
// Conversation Evaluation Endpoint
// =========================
// Modtager POST-request og evaluerer en enkelt brugerbesked med OpenAI
app.post('/api/evaluate', async (req, res) => {
  try {
    const userMessage = req.body.userMessage;
    const context = req.body.context || [];

    // Byg evaluerings-prompt til OpenAI
    const messages = [
      {
        role: 'system',
        content: `Du er en ekspert i patientsamtaler og skal evaluere en ENKELT ytring fra en sundhedsprofessionel.

OPGAVE:
Vurder denne enkeltst√•ende ytring baseret p√• de 5 kommunikationsprincipper:

1. Starter med n√¶rv√¶r og klar rammes√¶tning
2. Lytter aktivt og stiller √•bne sp√∏rgsm√•l  
3. Viser empati og anerkender patientens perspektiv
4. Opsummerer og afstemmer forst√•else
5. Afslutter med klare aftaler

VURDERING:
- Giv en score fra 1-10 (10 = fremragende)
- Identificer 1-2 styrker
- Giv 1 konkrete forbedringsforslag
- Hold det til max 80 ord

FORMAT:
[Score: X/10]
[Styrker: ...]
[Forbedringer: ...]`
      },
      // Tilf√∏j kontekst (sidste 3 beskeder)
      ...context.map(msg => ({
        role: msg.sender === "Dig" ? "user" : "assistant",
        content: msg.text
      })),
      // Tilf√∏j den nuv√¶rende besked der skal evalueres
      {
        role: 'user',
        content: `Evalu√©r denne ytring: "${userMessage}"`
      }
    ];

    // Kald OpenAI API for evaluering
    const response = await axios.post(
      'https://api.openai.com/v1/chat/completions',
      {
        model: 'gpt-4o',
        messages: messages,
        max_tokens: 300,
        temperature: 0.7
      },
      {
        headers: {
          'Authorization': `Bearer ${process.env.OPENAI_API_KEY}`,
          'Content-Type': 'application/json'
        }
      }
    );

    // Send evalueringen tilbage til frontend
    res.json({ evaluation: response.data.choices[0].message.content });
  } catch (err) {
    console.error('Fejl ved evaluering:', err.response ? err.response.data : err);
    res.status(500).json({ error: err.toString() });
  }
});

// =========================
// ElevenLabs Speak-endpoint
// =========================
// Modtager POST-request med tekst og returnerer lyd fra ElevenLabs
app.post('/api/speak', async (req, res) => {
  try {
    const text = req.body.text;
    const voiceSettings = req.body.voice_settings || { stability: 0.5, similarity_boost: 0.5 };
    const voiceId = "oR7UI6bWI8DTn0Oe1kc3"; // Ida (dansk)

    console.log('Modtog voice settings:', voiceSettings);

    // Kald ElevenLabs API for tekst-til-tale
    const response = await axios.post(
      `https://api.elevenlabs.io/v1/text-to-speech/${voiceId}`,
      {
        text: text,
        model_id: "eleven_multilingual_v2",
        voice_settings: voiceSettings
      },
      {
        headers: {
          'xi-api-key': process.env.ELEVENLABS_API_KEY,
          'Accept': 'audio/mpeg',
          'Content-Type': 'application/json'
        },
        responseType: 'arraybuffer'
      }
    );

    // S√¶t content-type og send lyd-data tilbage
    res.set('Content-Type', 'audio/mpeg');
    res.send(response.data);
  } catch (err) {
    // Log og send fejlbesked
    console.error(err.response ? err.response.data : err);
    res.status(500).json({ error: err.toString(), details: err.response ? err.response.data : undefined });
  }
});

// =====================
// Start serveren
// =====================
app.listen(3000, () => console.log('Server k√∏rer p√• http://localhost:3000'));
